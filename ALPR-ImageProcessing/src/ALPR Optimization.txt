import os
import cv2
import numpy as np

kernel = np.ones((2,2), np.uint8)
kernel2 = np.ones((3,3), np.uint8)
kernel3 = np.ones((4,4), np.uint8)

# kernel  and kernel2 is for sharpening
sharpen_kernel = np.array([[-1, -1, -1],
                                             [-1, 9, -1],
                                             [-1, -1, -1]])

sharpen2_kernel = (np.array([[0, -1, 0],
                                                [-1, 5, -1],
                                                [0, -1, 0]]))

# Create a Super-Resolution object
sr = cv2.dnn_superres.DnnSuperResImpl_create()

# upload image directory
# PRACTICE
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312192539_BQB3623_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312192644_NOPLATE_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312193609_NOPLATE_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312193815_NOPLATE_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312202630_WC9755_01_PLAT_0.jpg')


# FAILED
# image =cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312201002_NOPLATE_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312201139_NOPLATE_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312195044_NOPLATE_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312200706_NOPLATE_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312201239_VEC4069_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312201901_NOPLATE_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312202236_NOPLATE_01_PLAT_0.jpg')
# image = cv2.imread('D:\\LP dataset\\Sample\\20220312204718_NOPLATE_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312192714_NOPLATE_01_PLAT_0.jpg')


# clear
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312192757_NCV9020_01_PLAT_0.jpg')
image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312190030_BPE6433_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312190532_NOPLATE_01_PLAT_0.jpg..')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312191035_PDY474_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312191657_SLT6121_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312191834_BMW704_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312192616_BQQ243_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312192838_BND508_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312193343_NOPLATE_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312195613_NOPLATE_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312201835_BKX635_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312201936_NOPLATE_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312201806_Y9786_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312190136_JPB4164_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312193609_NOPLATE_01_PLAT_0.jpg')
# image = cv2.imread('D:\\FYP project\\LP dataset\\Sample\\20220312193243_NOPLATE_01_PLAT_0.jpg')
# image = cv2.imread('C:\\Users\\HUAWEI\\OneDrive - UCSI University\\Desktop\\bp_ocr\\bp_ocr\\test_images\\lpd\\01022021042502161201_JUF8606_PLAT_0.jpg')
# image  = cv2.imread('C:\\Users\\HUAWEI\\OneDrive - UCSI University\\Desktop\\20220313024521_BPN5638_01_PLAT_0.jpg')
# image = cv2.imread("C:\\Users\\HUAWEI\\Downloads\\Screenshot 2024-04-06 141406.png")
cv2.imshow("o'ri", image)

# Check the bit depth of image
bit_depth = image.dtype
print(f"The bit depth of the image is: {bit_depth}")

# upload model for image enlargement
model_path = 'C:/Users/HUAWEI/OneDrive - UCSI University/Desktop/image_enlarge/model/'
model = 'ESPCN_x3.pb'
full_model_path = os.path.join(model_path, model)

modelName = model.split(os.path.sep)[-1].split("_")[0].lower()
modelScale = model.split("_x")[-1]
modelScale = int(modelScale[:modelScale.find(".")])
print("The Model Name: ", modelName)
print("The Model scale: ", modelScale)

# Set the desired model and scale to get correct pre- and post-processing
sr.readModel(full_model_path)
sr.setModel(modelName, modelScale)

# Upscale the image
imgenlarge= sr.upsample(image)
cv2.imshow("image enlarge", imgenlarge)

# denoiaed umage iwth bilateral filter
denoised_orgimage = cv2.bilateralFilter(imgenlarge, 3, 300, 300)

sharpened_2 = cv2.filter2D(denoised_orgimage, -1, sharpen_kernel)

# grayscale
img_grey = cv2.cvtColor(sharpened_2, cv2.COLOR_BGR2GRAY)
cv2.imshow("grayscale image", img_grey)

# make into black background
ret, thresh4 = cv2.threshold(img_grey, 255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 11,2)
cv2.imshow("black background",  thresh4)

open_Img = cv2.morphologyEx(thresh4, cv2.MORPH_OPEN, kernel2)
cv2.imshow("OPEN",  open_Img)

# Adaptive Threshold Histogram
hist = cv2.calcHist([open_Img], [0], None, [256], [0, 255])
# plt.hist(img_grey.ravel(), bins=256)
# plt.title('Original Histogram')
# plt.show()8

cdf = np.cumsum(hist / np.sum(hist))
# plt.plot(cdf)
# plt.title('Cumulative Distribution Function (CDF)')
# plt.show()

lookup_table = np.zeros(256, dtype=np.uint8)
for intensity_value, cdf_value in enumerate(cdf):
    lookup_table[intensity_value] = np.clip(255 * cdf_value, 0, 255)
# Display the lookup table
# print("\nLookup Table:")
# print(lookup_table)


# Transform the intensity values of the image using the lookup table
image_eq = cv2.LUT(open_Img, lookup_table)
cv2.imshow("NH image", image_eq)

# Normalize the image
normalized_image = cv2.normalize(image_eq,None, alpha=0, beta=255, norm_type=cv2.NORM_MINMAX,dtype=cv2.CV_8U)
cv2.imshow("Normalized License Plate Image", normalized_image)

# Assuming normalized_image is already defined

zeros_array = np.zeros_like(img_grey)
contrasted_image = cv2.addWeighted(normalized_image, 1.2, zeros_array, 3, 3)
cv2.imshow('Contrasted Image', contrasted_image)

denoised_image = cv2.bilateralFilter(contrasted_image, 5, 300, 300)


# Perform non-l_ocal means denoising
img_denoised = cv2.fastNlMeansDenoising(denoised_image, None, h=31, templateWindowSize=7, searchWindowSize= 21)
cv2.imshow('Denoised image2', img_denoised)

# sharpenimage
sharpened = cv2.filter2D(img_denoised, -1, sharpen2_kernel)
cv2.imshow("OUTPUT", sharpened)

# # Specify the filename for the saved image
# save_path = os.path.join('C:\\Users\\HUAWEI\\OneDrive - UCSI University\\Desktop\\light9.jpg')
# cv2.imwrite(save_path, sharpened)

cv2.waitKey(0)
cv2.destroyAllWindows()